{"version":3,"sources":["Styles/Styles.js","Components/Registration.js","Components/Login.js","Components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["FlexContainer","styled","div","Button","button","MainDiv","ErrorMessage","p","Label","label","Input","Field","Title","h1","SubTitle","NavLink","span","FormikRegistration","withFormik","mapPropsToValues","username","password","email","city","state","validationSchema","Yup","shape","min","required","matches","max","handleSubmit","values","resetForm","console","log","errors","touched","htmlFor","type","name","to","FormikLogin","history","useHistory","onClick","push","Navigation","path","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac419813.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nimport {Field} from 'formik';\r\n\r\nexport const FlexContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 50%;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    width: 50%;\r\n    font-size: 1.5rem;\r\n    border-radius: 5px;\r\n    &:hover\r\n    {\r\n        background: gold;\r\n    }\r\n\r\n    margin: 0 auto;\r\n    margin-top: 5%;\r\n    margin-bottom: 3%;\r\n`;\r\n\r\nexport const MainDiv = styled.div`\r\n    margin: 5%;\r\n`\r\n\r\nexport const ErrorMessage = styled.p`\r\n    color: red;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n    display: block;\r\n    margin-bottom: 2%;\r\n    margin-top: 5%;\r\n    text-align: left;\r\n    margin-left: 25%;\r\n    color: white;\r\n`;\r\n\r\nexport const Input = styled(Field)`\r\n   width: 50%;\r\n   line-height: 30px;\r\n   margin-left: 25%;\r\n   font-size: 1.5rem;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n    font-size: 2rem;\r\n    color: white;\r\n`;\r\n\r\nexport const SubTitle = styled.p`\r\n    color: white;\r\n    font-size: 1.5rem;\r\n`;\r\n\r\nexport const NavLink = styled.span`\r\n    color: lightblue;\r\n`;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { withFormik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { FlexContainer, Button, MainDiv, ErrorMessage, Label, Input, Title, SubTitle, NavLink } from '../Styles/Styles'\r\n\r\nfunction Registration({ errors, touched }) {\r\n\r\n    return (\r\n        <MainDiv>\r\n            <Title>New User? Register with your info here!</Title>\r\n            <Form>\r\n                <FlexContainer>\r\n                    <Label htmlFor='username'>Username:</Label>\r\n                    <Input type='text' name='username' />\r\n                    {touched.username && <ErrorMessage>{errors.username}</ErrorMessage>}\r\n\r\n                    <Label htmlFor='password'>Password:</Label>\r\n                    <Input type='password' name='password' />\r\n                    {touched.password && <ErrorMessage>{errors.password}</ErrorMessage>}\r\n\r\n                    <Label htmlFor='email'>Email:</Label>\r\n                    <Input type='email' name='email' />\r\n                    {touched.email && <ErrorMessage>{errors.email}</ErrorMessage>}\r\n\r\n                    <Label htmlFor='city'>City:</Label>\r\n                    <Input type='text' name='city' />\r\n                    {touched.city && <ErrorMessage>{errors.city}</ErrorMessage>}\r\n\r\n                    <Label htmlFor='state'>State:</Label>\r\n                    <Input type='text' name='state' />\r\n                    {touched.state && <ErrorMessage>{errors.state}</ErrorMessage>}\r\n\r\n                    <Button type='submit'>Submit</Button>\r\n                </FlexContainer>\r\n            </Form>\r\n            <SubTitle>Already registered? Click <Link to='/'><NavLink>here</NavLink></Link> to login</SubTitle>\r\n        </MainDiv>\r\n    );\r\n}\r\n\r\nconst FormikRegistration = withFormik({\r\n    mapPropsToValues({ username, password, email, city, state }) {\r\n        return {\r\n            username: username || '',\r\n            password: password || '',\r\n            email: email || '',\r\n            city: city || '',\r\n            state: state || ''\r\n        };\r\n    },\r\n\r\n    validationSchema: Yup.object().shape({\r\n        username: Yup.string()\r\n            .min(6, 'username must be 6 characters or longer')\r\n            .required('Please enter a username'),\r\n\r\n        password: Yup.string()\r\n            .min(8, 'Password must include at least 8 characters')\r\n            .matches(/[!@#$%^&*(),.?\":{}|<>]/, 'Password must include 1 special character')\r\n            .required('Please enter password'),\r\n\r\n        email: Yup.string()\r\n            .email('must include @')\r\n            .required('Email is required'),\r\n\r\n        city: Yup.string(),\r\n\r\n        state: Yup.string()\r\n            .max(2, \"Please enter the 2 letter state code\")\r\n\r\n    }),\r\n\r\n    handleSubmit(values, { resetForm }) {\r\n        console.log(values);\r\n        resetForm();\r\n\r\n    }\r\n})(Registration)\r\n\r\nexport default FormikRegistration;","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { withFormik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { FlexContainer, Button, MainDiv, ErrorMessage, Label, Input, Title } from '../Styles/Styles'\r\n\r\nfunction Login({ errors, touched }) {\r\n    const history = useHistory();\r\n\r\n    function handleClick() {\r\n        history.push('/register');\r\n    }\r\n    return (\r\n        <MainDiv>\r\n            <Title>Already Registered? Log in here!</Title>\r\n            <Form>\r\n                <FlexContainer>\r\n                    <Label htmlFor='username'>Username:</Label>\r\n                    <Input type='text' name='username' />\r\n                    {touched.username && <ErrorMessage>{errors.username}</ErrorMessage>}\r\n\r\n                    <Label htmlFor='password'>Password:</Label>\r\n                    <Input type='password' name='password' />\r\n                    {touched.password && <ErrorMessage>{errors.password}</ErrorMessage>}\r\n                    <Button type='submit'>Submit</Button>\r\n                    <Button onClick={handleClick}>Sign Up</Button>\r\n                </FlexContainer>\r\n            </Form>\r\n        </MainDiv>\r\n    );\r\n}\r\n\r\nconst FormikLogin = withFormik({\r\n    mapPropsToValues({ username, password }) {\r\n        return {\r\n            username: username || '',\r\n            password: password || ''\r\n        };\r\n    },\r\n\r\n    validationSchema: Yup.object().shape({\r\n        username: Yup.string().required('Please enter your username'),\r\n        password: Yup.string().required('Please enter your password')\r\n    }),\r\n\r\n    handleSubmit(values, { resetForm }) {\r\n        console.log(values);\r\n        resetForm();\r\n\r\n    }\r\n})(Login)\r\n\r\nexport default FormikLogin;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Registration from './Registration';\r\nimport Login from './Login';\r\n\r\nfunction Navigation() {\r\n    return(\r\n        <Switch>\r\n            <Route path='/register'>\r\n                <Registration/>\r\n            </Route>\r\n            <Route path='/'>\r\n                <Login/>\r\n            </Route>\r\n        </Switch>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\n\nimport './App.css';\nimport Navigation from './Components/Navigation'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}